{
  "name": "Invoice OCR Workflow",
  "nodes": [
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "GPT-4"
        },
        "messages": {
          "values": [
            {
              "content": "你是一位資料擷取助手，專門從中文發票或訂單文字中擷取關鍵資訊。\n請根據提供的文字資料，輸出一個結構化的 JSON 格式，包含以下欄位：\n- \"customer_name\": 顧客名稱，若無資訊請填入 null\n- \"order_date\": 訂單日期（格式建議為 yyyy-mm-dd），若無資訊請填入null\n- \"items\": 每個商品一筆記錄，包含：\n  - \"original_input\": 原始的文字輸入\n  - \"item_name\": 商品名稱，若無法判斷請填入 null\n  - \"quantity\": 數量，若無請填入 null\n  - \"unit\": 單位（如 斤、支、盒 等），若無請填入 null\n  - \"note\": 其他備註，例如規格（可為 null）\n\n請僅輸出合法的 JSON 字串，**不要加入多餘文字或解釋**。",
              "role": "system"
            },
            {
              "content": "={{ $json[\"ocr_text\"] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        220,
        160
      ],
      "id": "19894b1c-a2e2-4f17-a04e-b0a6673f3ee3",
      "name": "OpenAI",
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "5bVdHT2dBFw0zH5W",
          "name": "OpenAi account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "\"\"\"\n取出Google Vision解讀出來的結果，並合併成text丟給LLM\n\"\"\"\nresponse = items[0][\"json\"].get(\"responses\", [{}])[0]\n\ntext = \"\"\nif \"fullTextAnnotation\" in response:\n    text = response[\"fullTextAnnotation\"].get(\"text\", \"\")\nelse:\n    annotations = response.get(\"textAnnotations\", [])\n    if annotations:\n        text = annotations[0].get(\"description\", \"\")\n\nreturn [{\n    \"json\": {\n        \"ocr_text\": text.strip()\n    }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        40,
        240
      ],
      "id": "7556528b-a789-425a-a6d9-cdf38a01123a",
      "name": "Data Cleaning"
    },
    {
      "parameters": {
        "operation": "keys",
        "keyPattern": "product:*"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        220,
        320
      ],
      "id": "9ce4b691-b290-49f4-a73e-22ae4533b45b",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "FGMwFw4spFFkLHJg",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "invoice",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -460,
        -60
      ],
      "id": "cf514274-5c76-421c-8a27-01b888318108",
      "name": "Upload Invoice",
      "webhookId": "f40335c3-7057-4251-82c7-329d023869b4"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "\"\"\"\n從redis取得產品清單\n\"\"\"\nproduct_list = []\n\nraw_dict = items[0][\"json\"]\n\nfor _, value in raw_dict.items():\n    # 將 JsProxy 轉為 Python dict（若需要）\n    value_dict = value.to_py() if hasattr(value, \"to_py\") else value\n    if isinstance(value_dict, dict):\n        product_list.append(value_dict)\n\nreturn [{\"json\": {\"product_list\": product_list}}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        320
      ],
      "id": "ff90535f-262f-409f-ba38-f415bdc75b73",
      "name": "Get Products"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "\"\"\"\n將模型產出跟redis查詢的結果進行清理\n\"\"\"\nimport json\nfrom datetime import date\n\nmerged = items[0][\"json\"]\n\nraw_content = merged.get(\"message\", {}).get(\"content\", \"[]\")\n\ntry:\n    parsed_content = json.loads(raw_content)\nexcept Exception:\n    parsed_content = {}\n\ncustomer_name = parsed_content.get(\"customer_name\") or merged.get(\"customer_name\", \"未知客戶\")\norder_date = parsed_content.get(\"order_date\") or merged.get(\"order_date\", date.today().isoformat())\n\nitems_list = parsed_content.get(\"items\", [])\n\noutput = {\n    \"customer_name\": customer_name,\n    \"order_date\": order_date,\n    \"items\": items_list,\n    \"product_list\": merged.get(\"product_list\", [])\n}\n\nreturn [{\"json\": output}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        460
      ],
      "id": "dbddc1e9-fb2d-480e-9779-b17377c8856b",
      "name": "Text Cleaning"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "\"\"\"\n將gradio讀進來的圖檔或是pdf轉換成可以call Google Vision API的格式\n\"\"\"\nbody = items[0][\"json\"].get(\"body\", {})\npages = body.get(\"pages\", [])\nfile_type = body.get(\"fileType\", \"image\")\n\nrequests = []\n\nif file_type == \"pdf\":\n    for page in pages:\n        base64_data = page.get(\"data\", \"\")\n        requests.append({\n            \"image\": {\n                \"content\": base64_data\n            },\n            \"features\": [\n                {\n                    \"type\": \"DOCUMENT_TEXT_DETECTION\"\n                }\n            ]\n        })\nelse:\n    # Fallback for single image\n    base64_data = body.get(\"data\", \"\")\n    requests.append({\n        \"image\": {\n            \"content\": base64_data\n        },\n        \"features\": [\n            {\n                \"type\": \"DOCUMENT_TEXT_DETECTION\"\n            }\n        ]\n    })\n\nreturn [{\n    \"json\": {\n        \"requests\": requests\n    }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -280,
        -60
      ],
      "id": "3b80278e-039c-48eb-a22b-9a43ce807fdd",
      "name": "Image Processing"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://vision.googleapis.com/v1/images:annotate",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -100,
        -60
      ],
      "id": "f9c47330-ed3d-4553-a517-ceb914679da9",
      "name": "Google Vision",
      "credentials": {
        "googleApi": {
          "id": "tLiWClUCdr2PmMVr",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:8000/match-products",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        460
      ],
      "id": "7bd215e3-01ed-4857-a6e7-4934f9a559b3",
      "name": "FastAPI Fuzzy Matching"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        560,
        240
      ],
      "id": "a1aa268b-f5d5-4efd-bc43-44c9dc53ae8f",
      "name": "Merge"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1260,
        560
      ],
      "id": "21c8d850-9542-4275-9c3f-0c1b59806547",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b2eb8685-32a2-4d8e-a811-a2940e5e1437",
              "leftValue": "={{ $json.items[0].match_score }}",
              "rightValue": 0.6,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1060,
        460
      ],
      "id": "827bb24c-fa07-4744-a97a-deab606ce21e",
      "name": "If match_score < 0.6"
    },
    {
      "parameters": {
        "fromEmail": "cssrm31@gmail.com",
        "toEmail": "guannluenc@gmail.com",
        "subject": "偵測到低信心比對項目，需人工審核",
        "emailFormat": "text",
        "text": "=以下項目的模糊比對分數過低，請人工確認：\n{{ \n  ($json.items || [])\n    .filter(i => (i.match_score || 0) < 0.6)\n    .map(i => \n      '- 原始輸入: ' + (i.original_input || '未提供') + \n      ' / 比對結果: ' + (i.matched_name || '無對應') + \n      ' / 信心值: ' + ((i.match_score || 0) + '').slice(0, 4)\n    )\n    .join(\"\\n\")\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1260,
        400
      ],
      "id": "983e84c9-b9e7-4537-bfa5-f5521e5ccffe",
      "name": "Send Email",
      "webhookId": "59a5f9f0-f533-41c5-9d83-db0aa7a82bb7",
      "credentials": {
        "smtp": {
          "id": "R6sqaDHVgsbfdkZf",
          "name": "SMTP account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Data Cleaning": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          },
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Get Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Invoice": {
      "main": [
        [
          {
            "node": "Image Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Products": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Text Cleaning": {
      "main": [
        [
          {
            "node": "FastAPI Fuzzy Matching",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Processing": {
      "main": [
        [
          {
            "node": "Google Vision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Vision": {
      "main": [
        [
          {
            "node": "Data Cleaning",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FastAPI Fuzzy Matching": {
      "main": [
        [
          {
            "node": "If match_score < 0.6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Text Cleaning",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If match_score < 0.6": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "eae3a978-ee29-4f04-a09a-71bb419814b7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8ea60d70c9fa85bbc068ecb5c0020a1826350328ac09e02b82b4bae5863e9808"
  },
  "id": "BfOUQh2Ejl0mRPX7",
  "tags": []
}